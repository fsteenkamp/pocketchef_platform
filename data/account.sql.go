// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: account.sql

package data

import (
	"context"
)

const accountCreate = `-- name: AccountCreate :exec
INSERT INTO account (
    id,
    email,
    is_admin,
    is_root
)
VALUES
    ($1, $2, $3, $4)
`

type AccountCreateParams struct {
	ID      string `json:"id"`
	Email   string `json:"email"`
	IsAdmin bool   `json:"is_admin"`
	IsRoot  bool   `json:"is_root"`
}

func (q *Queries) AccountCreate(ctx context.Context, arg AccountCreateParams) error {
	_, err := q.db.Exec(ctx, accountCreate,
		arg.ID,
		arg.Email,
		arg.IsAdmin,
		arg.IsRoot,
	)
	return err
}

const accountGetByEmail = `-- name: AccountGetByEmail :one
SELECT id, email, phone_number, is_admin, is_root, created_at, updated_at, last_active, first_name, last_name, chef_status, password, provider, provider_token, provider_refresh_token, provider_last_refresh, picture, disabled, is_archived, archived_at, archived_by FROM account WHERE email = $1
`

func (q *Queries) AccountGetByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, accountGetByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.IsAdmin,
		&i.IsRoot,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastActive,
		&i.FirstName,
		&i.LastName,
		&i.ChefStatus,
		&i.Password,
		&i.Provider,
		&i.ProviderToken,
		&i.ProviderRefreshToken,
		&i.ProviderLastRefresh,
		&i.Picture,
		&i.Disabled,
		&i.IsArchived,
		&i.ArchivedAt,
		&i.ArchivedBy,
	)
	return i, err
}

const accountGetByID = `-- name: AccountGetByID :one
SELECT id, email, phone_number, is_admin, is_root, created_at, updated_at, last_active, first_name, last_name, chef_status, password, provider, provider_token, provider_refresh_token, provider_last_refresh, picture, disabled, is_archived, archived_at, archived_by FROM account WHERE id = $1
`

func (q *Queries) AccountGetByID(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRow(ctx, accountGetByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.IsAdmin,
		&i.IsRoot,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastActive,
		&i.FirstName,
		&i.LastName,
		&i.ChefStatus,
		&i.Password,
		&i.Provider,
		&i.ProviderToken,
		&i.ProviderRefreshToken,
		&i.ProviderLastRefresh,
		&i.Picture,
		&i.Disabled,
		&i.IsArchived,
		&i.ArchivedAt,
		&i.ArchivedBy,
	)
	return i, err
}
