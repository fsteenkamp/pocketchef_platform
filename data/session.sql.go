// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const sessionCreate = `-- name: SessionCreate :exec
INSERT INTO session (
    id,
    account_id,
    expires_at,
    token_hash,
    created_at
)
VALUES
    ($1, $2, $3, $4, $5)
`

type SessionCreateParams struct {
	ID        string           `json:"id"`
	AccountID string           `json:"account_id"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	TokenHash string           `json:"token_hash"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) SessionCreate(ctx context.Context, arg SessionCreateParams) error {
	_, err := q.db.Exec(ctx, sessionCreate,
		arg.ID,
		arg.AccountID,
		arg.ExpiresAt,
		arg.TokenHash,
		arg.CreatedAt,
	)
	return err
}

const sessionGetFromTokenHash = `-- name: SessionGetFromTokenHash :one
SELECT id, token_hash, account_id, created_at, updated_at, expires_at, invalidated, invalidated_at, invalidated_by FROM session
WHERE token_hash = $1
`

func (q *Queries) SessionGetFromTokenHash(ctx context.Context, tokenHash string) (Session, error) {
	row := q.db.QueryRow(ctx, sessionGetFromTokenHash, tokenHash)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.TokenHash,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Invalidated,
		&i.InvalidatedAt,
		&i.InvalidatedBy,
	)
	return i, err
}

const sessionGetValid = `-- name: SessionGetValid :one
SELECT id, token_hash, account_id, created_at, updated_at, expires_at, invalidated, invalidated_at, invalidated_by FROM session
WHERE
    id = $1 AND
    expires_at > $2 AND
    invalidated = FALSE AND
    account_id = $3
`

type SessionGetValidParams struct {
	ID        string           `json:"id"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	AccountID string           `json:"account_id"`
}

func (q *Queries) SessionGetValid(ctx context.Context, arg SessionGetValidParams) (Session, error) {
	row := q.db.QueryRow(ctx, sessionGetValid, arg.ID, arg.ExpiresAt, arg.AccountID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.TokenHash,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.Invalidated,
		&i.InvalidatedAt,
		&i.InvalidatedBy,
	)
	return i, err
}

const sessionInvalidate = `-- name: SessionInvalidate :exec
UPDATE session
SET
    invalidated = true,
    invalidated_at = $1
WHERE
    id = $2 AND
    account_id = $3
`

type SessionInvalidateParams struct {
	InvalidatedAt pgtype.Timestamp `json:"invalidated_at"`
	ID            string           `json:"id"`
	AccountID     string           `json:"account_id"`
}

func (q *Queries) SessionInvalidate(ctx context.Context, arg SessionInvalidateParams) error {
	_, err := q.db.Exec(ctx, sessionInvalidate, arg.InvalidatedAt, arg.ID, arg.AccountID)
	return err
}
